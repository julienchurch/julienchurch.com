
==================== FINAL INTERFACE ====================
2016-02-14 08:38:48.245877 UTC

interface main@main:Web.Forms.Common 7102
  interface hash: 6719a3be1eb3da8e2b7e0f9ccf9b8ed2
  ABI hash: c90434c00876c90515c3a18fc7078a0d
  export-list hash: b93c5770fc3ce42727a85c5a5e1be11f
  orphan hash: e9e5bf7ccc88fd11cb6162c326b37ff9
  flag hash: 8b4a7ca52c5a8aaee8dec9fdb702216b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Web.Forms.Common.emailFormlet
  Web.Forms.Common.minMaxLen
  Web.Forms.Common.passwordFormlet
  Web.Forms.Common.usernameFormlet
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      blaze-html-0.8.1.0@blaze_66ArNDIe2grI2k2uqvUABl
                      blaze-markup-0.7.0.2@blaze_6nhu7sRJtdB5v7vsVCCq8v
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      digestive-functors-0.8.0.0@diges_4fM933LOkmWI9ExzL0lC1m
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  blaze-html-0.8.1.0@blaze_66ArNDIe2grI2k2uqvUABl:Text.Blaze.Html 39a67c7b43587d59c457711204577da4
import  -/  digestive-functors-0.8.0.0@diges_4fM933LOkmWI9ExzL0lC1m:Text.Digestive a02ca0a7d2d75627d58cd9de1e11b390
import  -/  digestive-functors-0.8.0.0@diges_4fM933LOkmWI9ExzL0lC1m:Text.Digestive.Form 2f83252c7d2d04e5519026d52b927f8e
import  -/  digestive-functors-0.8.0.0@diges_4fM933LOkmWI9ExzL0lC1m:Text.Digestive.Form.Internal 0aae07d0765c122f391fbc367d7d9c27
import  -/  digestive-functors-0.8.0.0@diges_4fM933LOkmWI9ExzL0lC1m:Text.Digestive.Types aac8d2dedae65ae346e31286f0fd86dc
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text a305d268b7ef3fbd1de87bd464ac8e2a
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Internal 9aaf446b91649c416d85a19f08d51f8e
a8f12f5601bd81980bf7157e6eb93b45
  $wminMaxLen ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Digestive.Types.Result
         Text.Blaze.Html.Html Data.Text.Internal.Text
  {- Arity: 5, Strictness: <L,U><L,U(U)><L,U><L,U><L,U>,
     Inline: [0] -}
aaf3f9c5de5b17556170559be6219996
  emailFormlet ::
    GHC.Base.Monad m =>
    GHC.Base.Maybe Data.Text.Internal.Text
    -> Text.Digestive.Form.Internal.Form
         Text.Blaze.Html.Html m Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,U,A)><L,1*U>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   mTxt :: GHC.Base.Maybe Data.Text.Internal.Text ->
                 let {
                   f :: Text.Digestive.Types.Result
                          Text.Blaze.Html.Html Data.Text.Internal.Text
                        -> m (Text.Digestive.Types.Result
                                Text.Blaze.Html.Html Data.Text.Internal.Text)
                   = GHC.Base.return
                       @ m
                       $dMonad
                       @ (Text.Digestive.Types.Result
                            Text.Blaze.Html.Html Data.Text.Internal.Text)
                 } in
                 Text.Digestive.Form.$wcheckM
                   @ Text.Blaze.Html.Html
                   @ Data.Text.Internal.Text
                   @ m
                   $dMonad
                   Web.Forms.Common.emailFormlet4
                   (let {
                      f1 :: GHC.Types.Bool -> m GHC.Types.Bool
                      = GHC.Base.return @ m $dMonad @ GHC.Types.Bool
                    } in
                    \ x :: Data.Text.Internal.Text ->
                    f1
                      (case x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                       let {
                         a :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                       } in
                       letrec {
                         $wloop_find :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Char
                           {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                         = \ ww :: GHC.Prim.Int# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# ww a) of wild1 {
                             GHC.Types.False
                             -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                  GHC.Types.False
                                  -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                       DEFAULT -> $wloop_find (GHC.Prim.+# ww 1)
                                       '@' -> Web.Forms.Common.emailFormlet2 }
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                       GHC.Types.False
                                       -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                            DEFAULT -> $wloop_find (GHC.Prim.+# ww 1)
                                            '@' -> Web.Forms.Common.emailFormlet2 }
                                       GHC.Types.True
                                       -> case GHC.Prim.indexWord16Array#
                                                 dt
                                                 (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                          case GHC.Prim.chr#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.uncheckedIShiftL#
                                                          (GHC.Prim.-#
                                                             (GHC.Prim.word2Int# r#)
                                                             55296)
                                                          10)
                                                       (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                    65536) of wild4 {
                                            DEFAULT -> $wloop_find (GHC.Prim.+# ww 2)
                                            '@' -> Web.Forms.Common.emailFormlet2 } } } } }
                             GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Char }
                       } in
                       case $wloop_find dt1 of wild1 {
                         GHC.Base.Nothing -> GHC.Types.False
                         GHC.Base.Just ipv -> GHC.Types.True } }))
                   (Text.Digestive.Form.Internal.Map
                      @ m
                      @ Text.Blaze.Html.Html
                      @ m
                      @ Data.Text.Internal.Text
                      @ Data.Text.Internal.Text
                      (\ x :: Data.Text.Internal.Text ->
                       f (case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Web.Forms.Common.$wminMaxLen
                            4
                            Web.Forms.Common.emailFormlet1
                            ww1
                            ww2
                            ww3 }))
                      (Text.Digestive.Form.Internal.Pure
                         @ m
                         @ Text.Blaze.Html.Html
                         @ m
                         @ Data.Text.Internal.Text
                         (Text.Digestive.Form.Internal.Field.Text
                            @ Text.Blaze.Html.Html
                            @ Data.Text.Internal.Text
                            @~ <Data.Text.Internal.Text>_N
                            (Data.Maybe.fromMaybe
                               @ Data.Text.Internal.Text
                               Data.Text.Internal.empty_
                               mTxt))))) -}
6aacd521076f2b8c64fb2fac8886b470
  emailFormlet1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 50) -}
76f41955e007c09a435591efdecdfb49
  emailFormlet2 :: GHC.Base.Maybe GHC.Types.Char
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Char
                   Web.Forms.Common.emailFormlet3) -}
42a81d57d372edc3766a0c2ac23ec5f7
  emailFormlet3 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# '@') -}
00cb4ab8c5fe0c074aa3d078e298d716
  emailFormlet4 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Web.Forms.Common.emailFormlet5) -}
d869470139df264856c4488ce9b5b9e7
  emailFormlet5 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Web.Forms.Common.emailFormlet6) -}
597ecbdd89e0ae2470c9e60ee8154e6a
  emailFormlet6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Not a valid email address"#) -}
155453416af9b2966a38d43300baa985
  minMaxLen ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Text.Internal.Text
    -> Text.Digestive.Types.Result
         Text.Blaze.Html.Html Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(SL),1*U(1*U(U),U(U))><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: Data.Text.Internal.Text ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 Web.Forms.Common.$wminMaxLen ww4 ww2 ww6 ww7 ww8 } } }) -}
18e1b1cd2ff2802b1d43c2506de866b8
  passwordFormlet ::
    GHC.Base.Monad m =>
    GHC.Base.Maybe Data.Text.Internal.Text
    -> Text.Digestive.Form.Internal.Form
         Text.Blaze.Html.Html m Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(A,A,A,1*U,A)><L,1*U>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   mTxt :: GHC.Base.Maybe Data.Text.Internal.Text ->
                 let {
                   f :: Text.Digestive.Types.Result
                          Text.Blaze.Html.Html Data.Text.Internal.Text
                        -> m (Text.Digestive.Types.Result
                                Text.Blaze.Html.Html Data.Text.Internal.Text)
                   = GHC.Base.return
                       @ m
                       $dMonad
                       @ (Text.Digestive.Types.Result
                            Text.Blaze.Html.Html Data.Text.Internal.Text)
                 } in
                 Text.Digestive.Form.Internal.Map
                   @ m
                   @ Text.Blaze.Html.Html
                   @ m
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   (\ x :: Data.Text.Internal.Text ->
                    f (case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                       Web.Forms.Common.$wminMaxLen
                         6
                         Web.Forms.Common.passwordFormlet1
                         ww1
                         ww2
                         ww3 }))
                   (Text.Digestive.Form.Internal.Pure
                      @ m
                      @ Text.Blaze.Html.Html
                      @ m
                      @ Data.Text.Internal.Text
                      (Text.Digestive.Form.Internal.Field.Text
                         @ Text.Blaze.Html.Html
                         @ Data.Text.Internal.Text
                         @~ <Data.Text.Internal.Text>_N
                         (Data.Maybe.fromMaybe
                            @ Data.Text.Internal.Text
                            Data.Text.Internal.empty_
                            mTxt)))) -}
c1582449c0c1028d1400a6d128c8fd8f
  passwordFormlet1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 40) -}
f2c45974d9ee7f3054e269ab353d0ec2
  usernameFormlet ::
    GHC.Base.Monad m =>
    GHC.Base.Maybe Data.Text.Internal.Text
    -> Text.Digestive.Form.Internal.Form
         Text.Blaze.Html.Html m Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(A,A,A,1*U,A)><L,1*U>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   mTxt :: GHC.Base.Maybe Data.Text.Internal.Text ->
                 let {
                   f :: Text.Digestive.Types.Result
                          Text.Blaze.Html.Html Data.Text.Internal.Text
                        -> m (Text.Digestive.Types.Result
                                Text.Blaze.Html.Html Data.Text.Internal.Text)
                   = GHC.Base.return
                       @ m
                       $dMonad
                       @ (Text.Digestive.Types.Result
                            Text.Blaze.Html.Html Data.Text.Internal.Text)
                 } in
                 Text.Digestive.Form.Internal.Map
                   @ m
                   @ Text.Blaze.Html.Html
                   @ m
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   (\ x :: Data.Text.Internal.Text ->
                    f (case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                       Web.Forms.Common.$wminMaxLen
                         3
                         Web.Forms.Common.usernameFormlet1
                         ww1
                         ww2
                         ww3 }))
                   (Text.Digestive.Form.Internal.Pure
                      @ m
                      @ Text.Blaze.Html.Html
                      @ m
                      @ Data.Text.Internal.Text
                      (Text.Digestive.Form.Internal.Field.Text
                         @ Text.Blaze.Html.Html
                         @ Data.Text.Internal.Text
                         @~ <Data.Text.Internal.Text>_N
                         (Data.Maybe.fromMaybe
                            @ Data.Text.Internal.Text
                            Data.Text.Internal.empty_
                            mTxt)))) -}
c6139863d25657de956dff5472c5b8ea
  usernameFormlet1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12) -}
"SPEC/Web.Forms.Common fromString @ Html" [ALWAYS] forall tpl :: Data.String.IsString
                                                                   Text.Blaze.Html.Html
  Data.String.fromString @ (Text.Blaze.Internal.MarkupM ()) tpl
  = Text.Blaze.Internal.$fIsStringMarkupM_$cfromString @ ()
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

